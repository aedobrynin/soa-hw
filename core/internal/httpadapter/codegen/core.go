// Package codegen provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.0.0 DO NOT EDIT.
package codegen

import (
	"context"
	"encoding/json"
	"fmt"
	"net/http"

	"github.com/go-chi/chi/v5"
	"github.com/oapi-codegen/runtime"
	strictnethttp "github.com/oapi-codegen/runtime/strictmiddleware/nethttp"
)

// ErrorMessage defines model for ErrorMessage.
type ErrorMessage struct {
	Error string `json:"error"`
}

// PostV1AuthJSONBody defines parameters for PostV1Auth.
type PostV1AuthJSONBody struct {
	Login    string `json:"login"`
	Password string `json:"password"`
}

// PostV1ChangeEmailJSONBody defines parameters for PostV1ChangeEmail.
type PostV1ChangeEmailJSONBody struct {
	Email string `json:"email"`
}

// PostV1ChangeEmailParams defines parameters for PostV1ChangeEmail.
type PostV1ChangeEmailParams struct {
	XSESSION string `form:"X_SESSION" json:"X_SESSION"`
}

// PostV1ChangeNameJSONBody defines parameters for PostV1ChangeName.
type PostV1ChangeNameJSONBody struct {
	Name string `json:"name"`
}

// PostV1ChangeNameParams defines parameters for PostV1ChangeName.
type PostV1ChangeNameParams struct {
	XSESSION string `form:"X_SESSION" json:"X_SESSION"`
}

// PostV1ChangePhoneJSONBody defines parameters for PostV1ChangePhone.
type PostV1ChangePhoneJSONBody struct {
	Phone string `json:"phone"`
}

// PostV1ChangePhoneParams defines parameters for PostV1ChangePhone.
type PostV1ChangePhoneParams struct {
	XSESSION string `form:"X_SESSION" json:"X_SESSION"`
}

// PostV1ChangeSurnameJSONBody defines parameters for PostV1ChangeSurname.
type PostV1ChangeSurnameJSONBody struct {
	Surname string `json:"surname"`
}

// PostV1ChangeSurnameParams defines parameters for PostV1ChangeSurname.
type PostV1ChangeSurnameParams struct {
	XSESSION string `form:"X_SESSION" json:"X_SESSION"`
}

// PostV1SignUpJSONBody defines parameters for PostV1SignUp.
type PostV1SignUpJSONBody struct {
	Login    string `json:"login"`
	Password string `json:"password"`
}

// PostV1AuthJSONRequestBody defines body for PostV1Auth for application/json ContentType.
type PostV1AuthJSONRequestBody PostV1AuthJSONBody

// PostV1ChangeEmailJSONRequestBody defines body for PostV1ChangeEmail for application/json ContentType.
type PostV1ChangeEmailJSONRequestBody PostV1ChangeEmailJSONBody

// PostV1ChangeNameJSONRequestBody defines body for PostV1ChangeName for application/json ContentType.
type PostV1ChangeNameJSONRequestBody PostV1ChangeNameJSONBody

// PostV1ChangePhoneJSONRequestBody defines body for PostV1ChangePhone for application/json ContentType.
type PostV1ChangePhoneJSONRequestBody PostV1ChangePhoneJSONBody

// PostV1ChangeSurnameJSONRequestBody defines body for PostV1ChangeSurname for application/json ContentType.
type PostV1ChangeSurnameJSONRequestBody PostV1ChangeSurnameJSONBody

// PostV1SignUpJSONRequestBody defines body for PostV1SignUp for application/json ContentType.
type PostV1SignUpJSONRequestBody PostV1SignUpJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Authentificate user
	// (POST /v1/auth)
	PostV1Auth(w http.ResponseWriter, r *http.Request)

	// (POST /v1/change_email)
	PostV1ChangeEmail(w http.ResponseWriter, r *http.Request, params PostV1ChangeEmailParams)

	// (POST /v1/change_name)
	PostV1ChangeName(w http.ResponseWriter, r *http.Request, params PostV1ChangeNameParams)

	// (POST /v1/change_phone)
	PostV1ChangePhone(w http.ResponseWriter, r *http.Request, params PostV1ChangePhoneParams)

	// (POST /v1/change_surname)
	PostV1ChangeSurname(w http.ResponseWriter, r *http.Request, params PostV1ChangeSurnameParams)
	// Register new user
	// (POST /v1/sign_up)
	PostV1SignUp(w http.ResponseWriter, r *http.Request)
}

// Unimplemented server implementation that returns http.StatusNotImplemented for each endpoint.

type Unimplemented struct{}

// Authentificate user
// (POST /v1/auth)
func (_ Unimplemented) PostV1Auth(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// (POST /v1/change_email)
func (_ Unimplemented) PostV1ChangeEmail(w http.ResponseWriter, r *http.Request, params PostV1ChangeEmailParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// (POST /v1/change_name)
func (_ Unimplemented) PostV1ChangeName(w http.ResponseWriter, r *http.Request, params PostV1ChangeNameParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// (POST /v1/change_phone)
func (_ Unimplemented) PostV1ChangePhone(w http.ResponseWriter, r *http.Request, params PostV1ChangePhoneParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// (POST /v1/change_surname)
func (_ Unimplemented) PostV1ChangeSurname(w http.ResponseWriter, r *http.Request, params PostV1ChangeSurnameParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Register new user
// (POST /v1/sign_up)
func (_ Unimplemented) PostV1SignUp(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// PostV1Auth operation middleware
func (siw *ServerInterfaceWrapper) PostV1Auth(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostV1Auth(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PostV1ChangeEmail operation middleware
func (siw *ServerInterfaceWrapper) PostV1ChangeEmail(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params PostV1ChangeEmailParams

	var cookie *http.Cookie

	if cookie, err = r.Cookie("X_SESSION"); err == nil {
		var value string
		err = runtime.BindStyledParameter("simple", true, "X_SESSION", cookie.Value, &value)
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "X_SESSION", Err: err})
			return
		}
		params.XSESSION = value

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "X_SESSION"})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostV1ChangeEmail(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PostV1ChangeName operation middleware
func (siw *ServerInterfaceWrapper) PostV1ChangeName(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params PostV1ChangeNameParams

	var cookie *http.Cookie

	if cookie, err = r.Cookie("X_SESSION"); err == nil {
		var value string
		err = runtime.BindStyledParameter("simple", true, "X_SESSION", cookie.Value, &value)
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "X_SESSION", Err: err})
			return
		}
		params.XSESSION = value

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "X_SESSION"})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostV1ChangeName(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PostV1ChangePhone operation middleware
func (siw *ServerInterfaceWrapper) PostV1ChangePhone(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params PostV1ChangePhoneParams

	var cookie *http.Cookie

	if cookie, err = r.Cookie("X_SESSION"); err == nil {
		var value string
		err = runtime.BindStyledParameter("simple", true, "X_SESSION", cookie.Value, &value)
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "X_SESSION", Err: err})
			return
		}
		params.XSESSION = value

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "X_SESSION"})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostV1ChangePhone(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PostV1ChangeSurname operation middleware
func (siw *ServerInterfaceWrapper) PostV1ChangeSurname(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params PostV1ChangeSurnameParams

	var cookie *http.Cookie

	if cookie, err = r.Cookie("X_SESSION"); err == nil {
		var value string
		err = runtime.BindStyledParameter("simple", true, "X_SESSION", cookie.Value, &value)
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "X_SESSION", Err: err})
			return
		}
		params.XSESSION = value

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "X_SESSION"})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostV1ChangeSurname(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PostV1SignUp operation middleware
func (siw *ServerInterfaceWrapper) PostV1SignUp(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostV1SignUp(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/v1/auth", wrapper.PostV1Auth)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/v1/change_email", wrapper.PostV1ChangeEmail)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/v1/change_name", wrapper.PostV1ChangeName)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/v1/change_phone", wrapper.PostV1ChangePhone)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/v1/change_surname", wrapper.PostV1ChangeSurname)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/v1/sign_up", wrapper.PostV1SignUp)
	})

	return r
}

type PostV1AuthRequestObject struct {
	Body *PostV1AuthJSONRequestBody
}

type PostV1AuthResponseObject interface {
	VisitPostV1AuthResponse(w http.ResponseWriter) error
}

type PostV1Auth200ResponseHeaders struct {
	SetCookie string
}

type PostV1Auth200Response struct {
	Headers PostV1Auth200ResponseHeaders
}

func (response PostV1Auth200Response) VisitPostV1AuthResponse(w http.ResponseWriter) error {
	w.Header().Set("Set-Cookie", fmt.Sprint(response.Headers.SetCookie))
	w.WriteHeader(200)
	return nil
}

type PostV1Auth401JSONResponse ErrorMessage

func (response PostV1Auth401JSONResponse) VisitPostV1AuthResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type PostV1ChangeEmailRequestObject struct {
	Params PostV1ChangeEmailParams
	Body   *PostV1ChangeEmailJSONRequestBody
}

type PostV1ChangeEmailResponseObject interface {
	VisitPostV1ChangeEmailResponse(w http.ResponseWriter) error
}

type PostV1ChangeEmail200Response struct {
}

func (response PostV1ChangeEmail200Response) VisitPostV1ChangeEmailResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type PostV1ChangeEmail401Response struct {
}

func (response PostV1ChangeEmail401Response) VisitPostV1ChangeEmailResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type PostV1ChangeEmail422JSONResponse ErrorMessage

func (response PostV1ChangeEmail422JSONResponse) VisitPostV1ChangeEmailResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(422)

	return json.NewEncoder(w).Encode(response)
}

type PostV1ChangeNameRequestObject struct {
	Params PostV1ChangeNameParams
	Body   *PostV1ChangeNameJSONRequestBody
}

type PostV1ChangeNameResponseObject interface {
	VisitPostV1ChangeNameResponse(w http.ResponseWriter) error
}

type PostV1ChangeName200Response struct {
}

func (response PostV1ChangeName200Response) VisitPostV1ChangeNameResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type PostV1ChangeName401Response struct {
}

func (response PostV1ChangeName401Response) VisitPostV1ChangeNameResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type PostV1ChangeName422JSONResponse ErrorMessage

func (response PostV1ChangeName422JSONResponse) VisitPostV1ChangeNameResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(422)

	return json.NewEncoder(w).Encode(response)
}

type PostV1ChangePhoneRequestObject struct {
	Params PostV1ChangePhoneParams
	Body   *PostV1ChangePhoneJSONRequestBody
}

type PostV1ChangePhoneResponseObject interface {
	VisitPostV1ChangePhoneResponse(w http.ResponseWriter) error
}

type PostV1ChangePhone200Response struct {
}

func (response PostV1ChangePhone200Response) VisitPostV1ChangePhoneResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type PostV1ChangePhone401Response struct {
}

func (response PostV1ChangePhone401Response) VisitPostV1ChangePhoneResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type PostV1ChangePhone422JSONResponse ErrorMessage

func (response PostV1ChangePhone422JSONResponse) VisitPostV1ChangePhoneResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(422)

	return json.NewEncoder(w).Encode(response)
}

type PostV1ChangeSurnameRequestObject struct {
	Params PostV1ChangeSurnameParams
	Body   *PostV1ChangeSurnameJSONRequestBody
}

type PostV1ChangeSurnameResponseObject interface {
	VisitPostV1ChangeSurnameResponse(w http.ResponseWriter) error
}

type PostV1ChangeSurname200Response struct {
}

func (response PostV1ChangeSurname200Response) VisitPostV1ChangeSurnameResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type PostV1ChangeSurname401Response struct {
}

func (response PostV1ChangeSurname401Response) VisitPostV1ChangeSurnameResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type PostV1ChangeSurname422JSONResponse ErrorMessage

func (response PostV1ChangeSurname422JSONResponse) VisitPostV1ChangeSurnameResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(422)

	return json.NewEncoder(w).Encode(response)
}

type PostV1SignUpRequestObject struct {
	Body *PostV1SignUpJSONRequestBody
}

type PostV1SignUpResponseObject interface {
	VisitPostV1SignUpResponse(w http.ResponseWriter) error
}

type PostV1SignUp200Response struct {
}

func (response PostV1SignUp200Response) VisitPostV1SignUpResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type PostV1SignUp422JSONResponse ErrorMessage

func (response PostV1SignUp422JSONResponse) VisitPostV1SignUpResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(422)

	return json.NewEncoder(w).Encode(response)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// Authentificate user
	// (POST /v1/auth)
	PostV1Auth(ctx context.Context, request PostV1AuthRequestObject) (PostV1AuthResponseObject, error)

	// (POST /v1/change_email)
	PostV1ChangeEmail(ctx context.Context, request PostV1ChangeEmailRequestObject) (PostV1ChangeEmailResponseObject, error)

	// (POST /v1/change_name)
	PostV1ChangeName(ctx context.Context, request PostV1ChangeNameRequestObject) (PostV1ChangeNameResponseObject, error)

	// (POST /v1/change_phone)
	PostV1ChangePhone(ctx context.Context, request PostV1ChangePhoneRequestObject) (PostV1ChangePhoneResponseObject, error)

	// (POST /v1/change_surname)
	PostV1ChangeSurname(ctx context.Context, request PostV1ChangeSurnameRequestObject) (PostV1ChangeSurnameResponseObject, error)
	// Register new user
	// (POST /v1/sign_up)
	PostV1SignUp(ctx context.Context, request PostV1SignUpRequestObject) (PostV1SignUpResponseObject, error)
}

type StrictHandlerFunc = strictnethttp.StrictHttpHandlerFunc
type StrictMiddlewareFunc = strictnethttp.StrictHttpMiddlewareFunc

type StrictHTTPServerOptions struct {
	RequestErrorHandlerFunc  func(w http.ResponseWriter, r *http.Request, err error)
	ResponseErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: StrictHTTPServerOptions{
		RequestErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		},
		ResponseErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusInternalServerError)
		},
	}}
}

func NewStrictHandlerWithOptions(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc, options StrictHTTPServerOptions) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: options}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
	options     StrictHTTPServerOptions
}

// PostV1Auth operation middleware
func (sh *strictHandler) PostV1Auth(w http.ResponseWriter, r *http.Request) {
	var request PostV1AuthRequestObject

	var body PostV1AuthJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.PostV1Auth(ctx, request.(PostV1AuthRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostV1Auth")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(PostV1AuthResponseObject); ok {
		if err := validResponse.VisitPostV1AuthResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostV1ChangeEmail operation middleware
func (sh *strictHandler) PostV1ChangeEmail(w http.ResponseWriter, r *http.Request, params PostV1ChangeEmailParams) {
	var request PostV1ChangeEmailRequestObject

	request.Params = params

	var body PostV1ChangeEmailJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.PostV1ChangeEmail(ctx, request.(PostV1ChangeEmailRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostV1ChangeEmail")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(PostV1ChangeEmailResponseObject); ok {
		if err := validResponse.VisitPostV1ChangeEmailResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostV1ChangeName operation middleware
func (sh *strictHandler) PostV1ChangeName(w http.ResponseWriter, r *http.Request, params PostV1ChangeNameParams) {
	var request PostV1ChangeNameRequestObject

	request.Params = params

	var body PostV1ChangeNameJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.PostV1ChangeName(ctx, request.(PostV1ChangeNameRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostV1ChangeName")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(PostV1ChangeNameResponseObject); ok {
		if err := validResponse.VisitPostV1ChangeNameResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostV1ChangePhone operation middleware
func (sh *strictHandler) PostV1ChangePhone(w http.ResponseWriter, r *http.Request, params PostV1ChangePhoneParams) {
	var request PostV1ChangePhoneRequestObject

	request.Params = params

	var body PostV1ChangePhoneJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.PostV1ChangePhone(ctx, request.(PostV1ChangePhoneRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostV1ChangePhone")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(PostV1ChangePhoneResponseObject); ok {
		if err := validResponse.VisitPostV1ChangePhoneResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostV1ChangeSurname operation middleware
func (sh *strictHandler) PostV1ChangeSurname(w http.ResponseWriter, r *http.Request, params PostV1ChangeSurnameParams) {
	var request PostV1ChangeSurnameRequestObject

	request.Params = params

	var body PostV1ChangeSurnameJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.PostV1ChangeSurname(ctx, request.(PostV1ChangeSurnameRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostV1ChangeSurname")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(PostV1ChangeSurnameResponseObject); ok {
		if err := validResponse.VisitPostV1ChangeSurnameResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostV1SignUp operation middleware
func (sh *strictHandler) PostV1SignUp(w http.ResponseWriter, r *http.Request) {
	var request PostV1SignUpRequestObject

	var body PostV1SignUpJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.PostV1SignUp(ctx, request.(PostV1SignUpRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostV1SignUp")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(PostV1SignUpResponseObject); ok {
		if err := validResponse.VisitPostV1SignUpResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}
